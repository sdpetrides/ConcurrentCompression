Systems Programming: ASST2
Stephen Petrides
Andrew Macneille

A multithreaded and a multiprocessed multipart compression program.

DESIGN

Take an uncompressed txt file (bigfile.txt) as input and output multiple compressed files (bigfile_txt_RLE, bigfile_txt_LOLS, bigfile_txt_LOLS0, bigfile_txt_LOLS1).

The multitreaded program will spawn threads for each part (compressT_LOLS).
The multiprocessed program will spawn children for each part (compressR_LOLS).

SPECIAL CASE HANDLING

If there not an even split of the characters to parts, we put the entire remainder into the first file.
Non-alphabetical characters are skipped and not considered in the compressed string.
Our first output file is named with a filename_txt_LOLS0.txt.
Our maximum string size is 1000 characters. After this mark the program will exit and report the maximum character limit has been reached.
An error is reported and the program exits if the number of parts is less than one.


MULTITHREADED PROGRAM

Global integer arrays CHUNK and START are used to partition the input file so that each thread properly works with the correct numbers of characters based on the user input of partition size. 

The user inputs the partition size, PARTS. The total number of characters in the uncompressed string of characters, UNCOMP_LEN, divided by PARTS is the minimum size of each chunk. This value is inserted into each index of CHUNK from 0 to (PARTS). Whatever the remainder of UNCOMP_LEN/PARTS is, is added to the first elements of CHUNK from 0 to UNCOMP_LEN/PARTS index positions in CHUNK. 

CHUNK is used to set the start position in the input file of each thread. Each index in START represents a thread, there are PARTS threads in total. START[i+1] = CHUNK[i] + START[i], uses the START of i and CHUNK of i to set START of i +1. 

These global arrays are initialized in method init_chunk().

Our program creates threads in the main() method, these threads are inserted into an array of threads of length PARTS. Main loops through the array spawning threads that execute the function compress on the correct segment of the input file. 

A struct thread_data is created for each thread. Its members are long int thread_id char * filename, char * out_filename, char * str. Ultimately, the struct holds the uncompressed characters and after compress is executed, holds the compressed form in str.

Main is the programs managing function, calling method init_chunk() spawning and joining threads as well as managing memory (mallocing and freeing). Compress is the worker function; it looks at each character in the thread's segment of characters and creates a compressed version and updates char *str. Also it opens a compressed file with a specific name based on the thread ID and writes the compressed string to that file.

MULTIPROCESSED PROGRAM






